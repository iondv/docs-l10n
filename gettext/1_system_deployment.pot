# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020, IONDV LLC and the IONDV community (Apache 2.0)
# This file is distributed under the same license as the IONDV Framework docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IONDV Framework docs latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-14 09:35+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../1_system_deployment/files_in_folder_bin.rst:3
msgid "Файлы в папке \"bin\""
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:5
msgid "В папке содержаться скрипты запуска приложения, реализованного на IONDV. Framework, такие как:"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:8
msgid "`acl.js`_"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:9
msgid "`export.js`_"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:10
msgid "`import.js и import-data.js`_"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:11
msgid "`setup.js`_"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:18
msgid "acl.js"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:20
msgid "Шаблон команды запуска: ``node %NODE_PATH%\\bin\\acl.js --d %NODE_PATH%\\applications\\%IONAPP%\\acl`` где, ``NODE_PATH`` - путь к директории платформы, ``%IONAPP%`` - наименование приложения."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:23
msgid "Добавляет права на объекты системы, указанные в папке acl."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:25
msgid "Так же доступны команды для создания роли и прав для нее в системе, в случае если в приложении отсутствуют настройки в папке **acl**\\ :"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:29
msgid "Настройка логина и пароль - ``node bin/adduser.js --name admin --pwd 123``"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:32
msgid "Настройка доступа - ``node bin/acl.js --u admin@local --role admin --p full``"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:35
msgid "Права на генерацию токена для сервиса rest/token - ``node bin/acl.js --role admin --p USE --res ws:::gen-ws-token``"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:42
msgid "export.js"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:44
msgid "Шаблон команды запуска: ``node bin/export --ns %IONAPP%``, где ``NODE_PATH`` - путь к директории платформы, ``%IONAPP%`` - наименование приложения (namespace)."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:46
msgid "Выполняет экспорт данных и меты из приложения, которое в данный момент собрано и запущено локально. Файлы экспорта формируются в структуру папок, которые расположены на одном уровне с директорией платформы в папке *out*."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:50
msgid "import.js и import-data.js"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:52
msgid "При импорте меты, по умолчанию, импорт данных не выполняется. Поэтому, для импорта меты вместе с данными вызываем команду:"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:55
msgid "``node bin/import.js --src %NODE_PATH%/applications/%IONAPP% --with-data --ns %IONAPP%`` где, ``NODE_PATH`` - путь к директории платформы, ``%IONAPP%`` - наименование приложения (namespace)."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:58
msgid "А для импорта непосредственно данных вызываем:"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:60
msgid "``node %NODE_PATH%/bin/import-data.js --src %NODE_PATH%/applications/%IONAPP%/data --ns %IONAPP%``"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:62
msgid "При этом, если импортируем мету и данные, указываем директорию приложения (при этом данные для импорта будут искаться в поддиректории data), если импортируем данные, нужно указывать непосредственно директорию с данными."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:65
msgid "setup.js"
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:67
msgid "Шаблон команды запуска: ``node %NODE_PATH%\\bin\\setup %IONAPP%`` где, ``NODE_PATH`` - путь к директории платформы, ``%IONAPP%`` - наименование приложения."
msgstr ""

#: ../../1_system_deployment/files_in_folder_bin.rst:70
msgid "Выполняет установку приложения, запускает скрипт развертывания приложения, что включает в себя импорт и запись в базу данных меты модулей приложения."
msgstr ""

#: ../../1_system_deployment/index.rst:2
msgid "1. Развертывание системы"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:5
msgid "Шаг 1 Установка окружения"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:7
msgid "Предыдущая страница: :doc:`Оглавление <../index>`"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:9
msgid "Окружение - это список программ необходимых для запуска платформы с приложением:"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:12
msgid "СУБД `MongoDb <https://www.mongodb.org/>`_ версии 3.6."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:13
msgid "Среда разработки `Node.js <https://nodejs.org/en/>`_ версии 10.x.x."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:16
msgid "СУБД"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:20
msgid "Необходимо установить СУБД `MongoDB <https://www.mongodb.org/>`_. Проверенная версия ``3.6.9`` и ``4.0.0``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:23
msgid "Далее создаем папку ``data`` на диске C: и в ней подпапку ``db``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:26
msgid "Для запуска базы данных переходим в папку расположения ``MongoDb``\\ , далее в папку ``server\\bin`` и запускаем файл ``mongod.exe``. Если есть необходимость использовать каталог с БД отличный от ``c:\\data\\db``\\ , тогда файл ``mongod.exe`` необходимо запустить с параметром ``--dbpath`` после которого указать путь к каталогу."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:31
msgid "Среда выполнения Node.js"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:33
msgid "Node.js - является средой, в которой осуществляется выполнение компонентов."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:37
msgid "Необходимо установить среду разработки `Node.js <https://nodejs.org/>`_. Проверенная версия node.JS ``10.14.2``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:40
msgid "По умолчанию установщик сам прописывает пути к Node.js в PATH, а также устанавливает менеджер пакетов ``npm``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:43
msgid "Установка глобальных зависимостей"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:45
msgid "Установливайте глобальные зависимости в командной строке ``cmd.exe``\\ , запущенной от имени администратора, после установки ``node.js``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:47
msgid "**NB:** команда ``node -v`` - показывает версию node.js."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:50
msgid "Установка среды сборки под Windows"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:54
msgid "Установите глобально пакет `node-gyp <https://github.com/nodejs/node-gyp>`_ командой ``npm install -g node-gyp`` необходимый для сборки различных библиотек."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:57
msgid "Для работы библиотеки под операционной системой семейства Windows дополнительно необходимо установить пакет windows-build-tools - ``npm install -g --production windows-build-tools``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:60
msgid "Пакет сборщика проектов"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:62
msgid "Для организации тестирования и сборки дистрибутивов при разработке используется `Gulp <http://gulpjs.com/>`_. Установите глобально командой ``npm install -g gulp@4.0``. ``4.0`` - поддерживаемая версия ``Gulp``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:65
msgid "Установщик фронтенд библиотек"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:67
msgid "Для установки библиотек фронтенд используется `bower <https://bower.io>`_. Установите глобально командой ``npm install -g bower``."
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:70
msgid "Следующая страница: :doc:`Установка ядра, модулей и приложения <step2_project_with_modules>`"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:75
#: ../../1_system_deployment/step2_project_with_modules.rst:146
#: ../../1_system_deployment/step3_building_and_running.rst:49
msgid "`License <https://github.com/iondv/framework/blob/master/LICENSE>`_                                        `Contact us <https://iondv.com/portal/contacts>`_                                         `English <https://iondv.readthedocs.io/en/latest/index.html>`_"
msgstr ""

#: ../../1_system_deployment/step1_installing_environment.rst:85
#: ../../1_system_deployment/step2_project_with_modules.rst:156
#: ../../1_system_deployment/step3_building_and_running.rst:59
msgid "Copyright (c) 2018 **LLC \"ION DV\"**.\\ :raw-html-m2r:`<br>` All rights reserved."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:5
msgid "Шаг 2 Установка ядра, модулей и приложения"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:7
#: ../../1_system_deployment/step3_building_and_running.rst:7
msgid ":doc:`Оглавление <../index>`"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:9
msgid "Предыдущая страница: :doc:`Установка окружения <step1_installing_environment>`"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:12
msgid "Клонирование приложения и его компонентов"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:14
msgid "**NB:** пути не должны содержать русских букв и пробелов. Мы советуем размещать приложение в ``c:\\workspace``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:16
msgid "Рассматриваем формирование проекта с модулями на примере приложения ``develop-and-test``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:20
msgid "Находим приложение в репозитории github. Набираем искомое приложение ``develop-and-test`` в поле поиска и переходим на него."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:23
msgid "Переходим в репозиторий файлов на ветку версии."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:26
msgid "Открываем файл ``package.json`` в котором смотрим зависимости."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:48
msgid "``engines\": \"ion\": 3.0.0`` - версия ядра ``3.0.0``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:51
msgid "``ionModulesDependencies`` - список модулей и их версий."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:54
msgid "``ionMetaDependencies`` - список других метаданных, необходимых для проекта, в данном случае исключение ``viewlib`` - библиотека представлений."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:56
msgid "**NB:** для переключения на tag номера версии - смотрите версии в файле ``package.json``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:59
msgid "Получение репозитория ядра"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:61
msgid "Ядро находится в репозитории `framework <https://github.com/iondv/framework>`_. На главной странице есть поле с путем к репозиторию."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:65
msgid "Запустите командную строку от имени администратора."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:68
msgid "Скопируйте адрес репозитория, перейдите в папку workspace командой  ``cd c:\\workspace`` и выполните команду ``git clone https://github.com/iondv/framework``. Эта команда создает папку ``framework`` и в неё клонирует репозиторий."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:71
msgid "Получение модулей"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:75
msgid "Переходим в папку модулей командой ``cd framework\\modules``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:78
msgid "Для каждого модуля из списка ``package.json`` в свойстве ``ionModulesDependencies`` - находим репозиторий модуля среди группы модулей ``https://github.com/iondv/ION-MODULES``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:81
msgid "Клонируйте все модули из списка ``ionModulesDependencies`` командой ``git clone https://github.com/iondv/registry``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:84
msgid "Перейдите в папку установленного модуля, переключитесь на tag номера версии ``git checkout tags/v1.27.1``. Например ``1.27.1`` - это номер версии модуля ``registry``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:87
msgid "Повторите для всех модулей."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:90
msgid "Получение приложения"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:94
msgid "Переходим в папку приложения. Если вы находитесь в папке модулей выполните команду ``cd ..\\applications``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:97
msgid "Далее вернитесь на страницу репозитория ``develop-and-test``\\ , скопируйте путь и клонируйте его командой ``git clone https://github.com/iondv/develop-and-test``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:101
msgid "Перейдите в папку установленного приложения, переключитесь на tag номера версии ``git checkout tags/v1.17.0``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:104
msgid "Установка зависимостей в ``ionMetaDependencies`` осуществляется в папку ``applications``\\ , для установки необходимо убедиться, что находитесь в папке приложений. Клонируем приложения из списка в параметре  ``ionMetaDependencies``. Для приложения ``viewlib`` клонируйте командой ``git clone https://github.com/iondv/viewlib``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:107
msgid "Перейдите в папку установленного приложения, переключитесь на tag номера версии ``git checkout tags/v0.9.1``. Повторите для каждого приложения."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:110
msgid "Приложение скомпоновано."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:112
msgid "**NB:** мы советуем создать для него проект в IDE, например Visual Studio Code и в нём создать конфигурациионный файл."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:115
msgid "Конфигурациионный файл"
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:117
msgid "Конфигурационный файл служит для задания основных параметров окружения приложения и настройки дополнительных параметров запуска."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:121
msgid "Создайте конфигурационный файл ``setup`` с расширением ``ini`` в папке ``config``."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:124
msgid "Открываем файл в редакторе и вставляем содержимое."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:138
msgid "Самый главный параметр - ``db.uri=mongodb://127.0.0.1:27017/db``. Он указывает на название базы которую мы будем использовать для приложения. База данных будет создана автоматически."
msgstr ""

#: ../../1_system_deployment/step2_project_with_modules.rst:141
msgid "Следующая страница: :doc:`Шаг 3 Сборка, развертывание и запуск <step3_building_and_running>`"
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:5
msgid "Шаг 3 Cборка и запуск приложения"
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:9
msgid "Предыдущая страница: :doc:`Шаг 2 Установка ядра, модулей и приложения <step2_project_with_modules>`"
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:11
msgid "Для всех дальнейших команд, необходимо запустить командную строку от имени администратора."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:13
msgid "Перейдите в папку приложения ``cd c:\\workspace\\framework`` и задайте переменную окружения  ``NODE_PATH`` равной пути к приложению. Для Windows команда - ``set NODE_PATH=c:\\workspace\\framework``\\ , для Linux - ``export NODE_PATH=/workspace/framework``."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:17
msgid "Сборка приложения"
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:19
msgid "Сборка приложения обеспечивает установку всех библиотек, импорт данных в базу данных и подготовку приложения для запуска."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:23
msgid "При первом запуске необходимо выполнить ``npm install`` - она поставит ключевые зависимости, в том числе локально сборщик ``gulp``. Убедитесь, что версия ``Gulp`` - ``4.0``. Эта команда ставит все библиотеки из свойства ``dependencies`` файла ``package.json`` ядра."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:26
msgid "После этого, а также все последующие разы выполняйте команду сборки приложения ``gulp assemble``."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:28
msgid "**NB:** Убедитесь, что стоит переменная окружения ``NODE_PATH``\\ , запущена база ``MongoDB``\\ , ``Gulp`` установлен глобально и локально и его версия ``4.0``."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:31
msgid "Перед непосредственным запуском приложения необходимо добавить базового пользователя для входа. Откройте программу ``Mongo Compass`` и в базе данных найдите таблицу ``ion-user``. Удалите все записи, которые увидите там. Далее вернитесь в консоль и выполните указанные ниже команды. Добавьте пользователя admin с паролем 123 командой ``node bin/adduser.js --name admin --pwd 123``. Добавьте пользователю права администратора командой ``node bin/acl.js --u admin@local --role admin --p full``."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:35
msgid "Запуск приложения"
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:37
msgid "После окончания сборки можно запускать приложение. Убедитесь, что стоит переменная окружения ``NODE_PATH``. Без этого система выдаст ошибку, об отсутствии компонентов."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:39
msgid "Запуск системы осуществляется командой ``npm start``\\ , альтерантивой является запуск ``node bin/www``."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:41
msgid "После запуска системы, откройте браузер с адресом ``http://localhost:8888`` и авторизуйтесь в приложении, где ``8888`` - порт указанный в параметре ``server.ports`` конфигурации запуска."
msgstr ""

#: ../../1_system_deployment/step3_building_and_running.rst:44
msgid "Следующая страница: :doc:`Описание системы - схема метаданных <../2_system_description/metadata_structure/meta_scheme>`"
msgstr ""
